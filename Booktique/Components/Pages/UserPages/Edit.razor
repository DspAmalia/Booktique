@page "/users/edit"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Booktique.Models.MainModels

@inject IDbContextFactory<BooktiqueContext> DbFactory
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>Edit User</PageTitle>

<h1>👤 Edit User</h1>

<hr />

@if (User is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex justify-content-center mt-4">
        <div class="card shadow p-4" style="max-width: 700px; width: 100%;">

            <EditForm method="post" Model="User" OnValidSubmit="UpdateUser" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" class="text-danger" />
                <input type="hidden" name="User.UserId" value="@User.UserId" />

                <div class="mb-3">
                    <label for="username" class="form-label">UserName:</label>
                    <InputText id="username" @bind-Value="User.UserName" class="form-control" />
                    <ValidationMessage For="() => User.UserName" class="text-danger" />
                </div>

                    
                <div class="mb-3">
                    <label for="password" class="form-label">Password:</label>
                    <InputText id="password" @bind-Value="User.Password" class="form-control" />
                    <ValidationMessage For="() => User.Password" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="role" class="form-label">Role:</label>
                    <InputText id="role" @bind-Value="User.Role" class="form-control" readonly />
                    <ValidationMessage For="() => User.Role" class="text-danger" />
                </div>

                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-warning px-4">💾 Save</button>
                    <a href="/users" class="btn btn-outline-secondary">Back to the list</a>
                </div>
            </EditForm>
        </div>
    </div>
}

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        background-color: #fdf6ee;
        font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
    }
</style>

@code {
    [SupplyParameterFromQuery]
    private int UserId { get; set; }

    [SupplyParameterFromForm]
    private User? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        User ??= await context.User.FirstOrDefaultAsync(m => m.UserId == UserId);

        if (User is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateUser()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(User!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UserExists(User!.UserId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/");
    }

    private bool UserExists(int userid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.User.Any(e => e.UserId == userid);
    }
}
