@page "/books/edit"
@using Microsoft.EntityFrameworkCore
@using Booktique.Models.MainModels
@inject IDbContextFactory<BooktiqueContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Book</PageTitle>

<h1>✏️ Edit Book</h1>

<hr />

@if (Book is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex justify-content-center mt-4">
        <div class="card shadow p-4" style="max-width: 900px; width: 100%;">

            <EditForm method="post" Model="Book" OnValidSubmit="UpdateBook" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" class="text-danger" />
                <input type="hidden" name="Book.BookId" value="@Book.BookId" />

                <div class="row">
                    <div class="col-md-6">
                        @* Coloana 1 *@
                        <div class="mb-3">
                            <label for="booktitle" class="form-label">Title:</label>
                            <InputText id="booktitle" @bind-Value="Book.BookTitle" class="form-control" />
                            <ValidationMessage For="() => Book.BookTitle" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="bookauthor" class="form-label">Author:</label>
                            <InputText id="bookauthor" @bind-Value="Book.BookAuthor" class="form-control" />
                            <ValidationMessage For="() => Book.BookAuthor" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="bookdescription" class="form-label">Description:</label>
                            <InputText id="bookdescription" @bind-Value="Book.BookDescription" class="form-control" />
                            <ValidationMessage For="() => Book.BookDescription" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="bookyear" class="form-label">Year:</label>
                            <InputNumber id="bookyear" @bind-Value="Book.BookYear" class="form-control" />
                            <ValidationMessage For="() => Book.BookYear" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="booknumberpag" class="form-label">Nr. pages:</label>
                            <InputNumber id="booknumberpag" @bind-Value="Book.BookNumberPag" class="form-control" />
                            <ValidationMessage For="() => Book.BookNumberPag" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="bookpublishinghouse" class="form-label">Publisher:</label>
                            <InputText id="bookpublishinghouse" @bind-Value="Book.BookPublishingHouse" class="form-control" />
                            <ValidationMessage For="() => Book.BookPublishingHouse" class="text-danger" />
                        </div>
                    </div>

                    <div class="col-md-6">
                        @* Coloana 2 *@
                        <div class="mb-3">
                            <label for="bookcategory" class="form-label">Category:</label>
                            <InputText id="bookcategory" @bind-Value="Book.BookCategory" class="form-control" />
                            <ValidationMessage For="() => Book.BookCategory" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="booklanguage" class="form-label">Language:</label>
                            <InputText id="booklanguage" @bind-Value="Book.BookLanguage" class="form-control" />
                            <ValidationMessage For="() => Book.BookLanguage" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="bookstock" class="form-label">Stock:</label>
                            <InputNumber id="bookstock" @bind-Value="Book.BookStock" class="form-control" />
                            <ValidationMessage For="() => Book.BookStock" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="bookprice" class="form-label">Price:</label>
                            <InputNumber id="bookprice" @bind-Value="Book.BookPrice" class="form-control" />
                            <ValidationMessage For="() => Book.BookPrice" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="bookcoverpath" class="form-label">Cover Parth (URL):</label>
                            <InputText id="bookcoverpath" @bind-Value="Book.BookCoverPath" class="form-control" />
                            <ValidationMessage For="() => Book.BookCoverPath" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="bookrating" class="form-label">Rating:</label>
                            <InputNumber id="bookrating" @bind-Value="Book.BookRating" class="form-control" />
                            <ValidationMessage For="() => Book.BookRating" class="text-danger" />
                        </div>
                    </div>
                </div>

                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-warning px-4">💾 Save</button>
                    <a href="/" class="btn btn-outline-secondary">Back to the list</a>
                </div>
            </EditForm>
        </div>
    </div>
}

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        background-color: #fdf6ee;
        font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
    }
</style>

@code {
    [SupplyParameterFromQuery]
    private int BookId { get; set; }

    [SupplyParameterFromForm]
    private Book? Book { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Book ??= await context.Book.FirstOrDefaultAsync(m => m.BookId == BookId);

        if (Book is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateBook()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Book!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BookExists(Book!.BookId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo($"/books/details?bookid={BookId}");
    }

    private bool BookExists(int bookid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Book.Any(e => e.BookId == bookid);
    }
}
