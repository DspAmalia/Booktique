@page "/delete"

@using Booktique.Models.MainModels
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims

@inject BooktiqueContext DbContext
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IDbContextFactory<BooktiqueContext> DbFactory

@rendermode InteractiveServer

@attribute [Authorize]

<PageTitle>Delete Account</PageTitle>

<h2 class="text-center text-danger mt-4">Delete Account</h2>

@if (user == null)
{
    <p class="text-muted text-center">Loading profile...</p>
}
else if (deleted)
{
    <div class="alert alert-success text-center">
        Your account has been deleted successfully.
    </div>
}
else
{
    
    <div class="mx-auto mt-4 p-4 shadow rounded" style="max-width: 500px;">
        <p class="text-center text-danger fw-bold">
            Are you sure you want to permanently delete your account?
        </p>

        <dl class="row">
            <dt class="col-sm-4">User Name</dt>
            <dd class="col-sm-8">@user.UserName</dd>

            <dt class="col-sm-4">Email</dt>
            <dd class="col-sm-8">@user.UserEmail</dd>

            <dt class="col-sm-4">Role</dt>
            <dd class="col-sm-8">@user.Role</dd>
        </dl>

        <div class="mt-3 d-flex justify-content-between">
            <EditForm Model="user" OnValidSubmit="DeleteAccount" FormName="delete">    
                <button class="btn btn-danger">Yes, Delete</button>
            </EditForm>
            <button type="submit" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </div>
}

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        background-color: #fdf6ee;
        font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
    }
</style>

@code {
    private User? user;
    private bool deleted = false;
    private string? errorMessage;
    private bool shouldRedirect = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var sessionEmail = HttpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.Email)?.Value;

            if (string.IsNullOrEmpty(sessionEmail))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            user = await DbContext.User.FirstOrDefaultAsync(u => u.UserEmail == sessionEmail);

            if (user == null)
            {
                NavigationManager.NavigateTo("/notfound");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading user: {ex.Message}";
        }
    }

    private async Task DeleteAccount()
    {
        if (user is null)
        {
            errorMessage = "User not found.";
            return;
        }

        var sessionEmail = HttpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.Email)?.Value;

        if (string.IsNullOrEmpty(sessionEmail) || sessionEmail != user.UserEmail)
        {
            errorMessage = "Unauthorized deletion attempt.";
            return;
        }

        try
        {
            using var context = DbFactory.CreateDbContext();
            context.User.Remove(user);
            await context.SaveChangesAsync();

            deleted = true;
            shouldRedirect = true;
            await HttpContextAccessor.HttpContext!.SignOutAsync();
            await Task.Delay(2000);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting account: {ex.Message}";
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (shouldRedirect)
        {
            shouldRedirect = false;
            NavigationManager.NavigateTo("/logout", forceLoad: true);
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/profile");
    }
}
